-- View: client_list--DROP VIEW client_list;CREATE OR REPLACE VIEW client_list AS 	SELECT 		cl.id,		cl.name,		cl.client_activity_id,		cl_a.name AS client_activity_descr,		cl.inn,		get_contract_states_descr(cl_c.state) AS contract_descr,		date10_descr(cl_c.date_to) contract_period,		CASE			WHEN cl.pay_type='with_delay'::payment_types THEN				get_payment_types_descr(cl.pay_type)::text||'('||cl.pay_delay_days||'дн.)'			ELSE				get_payment_types_descr(cl.pay_type)::text		END AS terms,		0 AS debt,		cl.login_allowed,		cl.def_firm_id,		cl.def_warehouse_id,		f.name AS def_firm_descr,		w.name AS def_warehouse_descr,				CASE			WHEN cl.def_firm_id IS NULL THEN 0			ELSE				(SELECT t.debt_total FROM client_debts AS t WHERE t.client_id=cl.id AND t.firm_id=cl.def_firm_id LIMIT 1)		END AS debt_total,				CASE			WHEN cl.def_firm_id IS NULL THEN 0			ELSE				(SELECT sum(t.def_debt) FROM client_debts AS t WHERE t.client_id=cl.id AND t.firm_id=cl.def_firm_id)		END AS def_debt,				cl.deleted,				--Если ДА - из клиента, иначе - константа!		CASE			WHEN coalesce(cl.deliv_add_cost_to_product,FALSE) THEN cl.deliv_add_cost_to_product			ELSE const_order_deliv_add_cost_to_product_val()		END AS deliv_add_cost_to_product				FROM clients AS cl	LEFT JOIN client_activities AS cl_a ON cl_a.id=cl.client_activity_id		LEFT JOIN firms f ON f.id=cl.def_firm_id	LEFT JOIN warehouses w ON w.id=cl.def_warehouse_id		LEFT JOIN client_contracts AS cl_c		ON cl_c.client_id=cl.id		AND cl_c.date_to=(			SELECT MAX(sub.date_to)			FROM client_contracts AS sub			WHERE sub.client_id=cl.id			)	/*			LEFT JOIN (		SELECT			t.client_id,			t.firm_id,			t.debt_total AS debt_total,			sum(t.def_debt) AS def_debt		FROM client_debts AS t		GROUP BY t.client_id,t.firm_id,t.debt_total		) cld ON cld.client_id=cl.id AND cld.firm_id=cl.def_firm_id	*/			WHERE cl.registered;ALTER TABLE client_list OWNER TO polimerplast;